version: "3.7"

services:

  zendro-keycloak-postgres:
    container_name: zendro-keycloak-postgres
    image: postgres
    volumes:
      - keycloak_pg_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${KEYCLOAK_DATABASE_NAME}
      POSTGRES_USER: ${KEYCLOAK_DATABASE_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_DATABASE_PASSWORD}
    networks:
      - backend

  zendro-keycloak:
    container_name: zendro-keycloak
    image: quay.io/keycloak/keycloak:19.0.1
    entrypoint: ["/opt/keycloak/bin/kc.sh", "start"]
    environment:
      KC_DB: ${KEYCLOAK_DATABASE_VENDOR}
      KC_DB_URL_HOST: ${KEYCLOAK_DATABASE_HOST}
      KC_DB_URL_DATABASE: ${KEYCLOAK_DATABASE_NAME}
      KC_DB_USERNAME: ${KEYCLOAK_DATABASE_USER}
      KC_DB_SCHEMA: ${KEYCLOAK_DATABASE_SCHEMA}
      KC_DB_PASSWORD: ${KEYCLOAK_DATABASE_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HTTP_RELATIVE_PATH: ${KEYCLOAK_HTTP_RELATIVE_PATH}
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME}
      KC_HOSTNAME_PORT: ${KEYCLOAK_HOSTNAME_PORT}
      # The following options are to circumvent setting up TLS. Make sure to set
      # up TLS and expose your keycloak endpoints through https
      # (https://www.keycloak.org/server/enabletls) in a production envionment.
      # In case you want to use a reverse proxy please check out the keycloak
      # documentation on how to use it behind a reverse proxy
      # (https://www.keycloak.org/server/reverseproxy).
      KC_HTTP_ENABLED: "true"
      KC_HOSTNAME_STRICT_HTTPS: "false"
    depends_on:
      - zendro-keycloak-postgres
    networks:
      - backend

  zendro-postgres:
    container_name: zendro-postgres
    image: postgres
    environment:
      POSTGRES_DB : zendro_development
      POSTGRES_USER: zendro
      POSTGRES_PASSWORD: zendro
    volumes:
      - zendro_db_data:/var/lib/postgresql/data
    networks:
      - backend

  zendro-graphql-server:
    container_name: zendro-graphql-server
    depends_on:
      - zendro-keycloak
      - zendro-postgres
    build:
      context: ./contexts
      dockerfile: Dockerfile.graphql_server
    environment:
      PORT: "3000"
      JQ_PATH: /usr/bin/jq
      NODE_JQ_SKIP_INSTALL_BINARY: "true"
      REQUIRE_SIGN_IN: "true"
    labels:
      traefik.enable: "true"
      traefik.backend: "zendro-graphql-server"
      traefik.frontend.rule: "Host:graphql.zendro-dev.org"
      traefik.docker.network: "reverseproxy"
      traefik.port: "3000"
    volumes:
      - ./graphql-server:/usr/graphql-server
      # override default default config with Starterpack config
      - ./config/data_models_storage_config.json:/usr/graphql-server/config/data_models_storage_config.json
      - ./graphiql-auth/.env.development:/usr/graphiql-auth/.env.development
      - ./graphiql-auth/.env.production:/usr/graphiql-auth/.env.production
      - ./single-page-app/.env.development:/usr/single-page-app/.env.development
      - ./single-page-app/.env.production:/usr/single-page-app/.env.production
    # Await POSTGRES role and DB creation, migrate schema, then start web
    # server:
    networks:
      - backend
      - reverseproxy
    command:
      - /bin/sh
      - -c
      - |
        npm install
        node migrateDbAndStartServer.js 
        
  zendro-spa:
    container_name: zendro-spa
    # Workaround. See https://github.com/facebook/create-react-app/issues/8688
    stdin_open: true
    depends_on:
      - zendro-graphql-server
    build:
      context: ./contexts
      dockerfile: Dockerfile.spa
    # Using ports in this way is a security concern. Please consider using e.g. a reverseproxy
    environment:
      # Set your production environment variables here or in ./single-page-app/.env.production
      PORT: "8080"
    labels:
      traefik.enable: "true"
      traefik.backend: "zendro-spa"
      traefik.frontend.rule: "Host:spa.zendro-dev.org"
      traefik.docker.network: "reverseproxy"
      traefik.port: "8080"
    volumes:
      - ./single-page-app:/usr/single-page-app
      - ./data_model_definitions:/usr/data_model_definitions
    networks:
      - reverseproxy
    # Install dependencies and start single-page-app-server in development
    # mode.
    command:
      - /bin/sh
      - -c
      - |
        rm -rf .next
        rm -rf out
        yarn install
        yarn build
        yarn start

  zendro-graphiql:
    container_name: zendro-graphiql
    # Workaround. See https://github.com/facebook/create-react-app/issues/8688
    stdin_open: true
    depends_on:
      - zendro-graphql-server
    build:
      context: ./contexts
      dockerfile: Dockerfile.graphiql
    environment:
      REACT_APP_SERVER_URL: "https://graphql.zendro-dev.org/graphql"
      REACT_APP_LOGIN_URL: "https://graphql.zendro-dev.org/login"
      REACT_APP_SERVER_METAQUERY_URL: "https://graphql.zendro-dev.org/meta_query"
      PORT: "7000"
    labels:
      traefik.enable: "true"
      traefik.backend: "zendro-graphiql"
      traefik.frontend.rule: "Host:graphiql.zendro-dev.org"
      traefik.docker.network: "reverseproxy"
      traefik.port: "7000"
    volumes:
      - ./graphiql-auth:/usr/graphiql-auth
    # Install dependencies and start single-page-app-server in development
    # mode.
    networks:
      - reverseproxy
    command:
      - /bin/sh
      - -c
      - |
        rm -rf .next
        rm -rf out
        yarn install
        yarn build
        yarn start
        
volumes:
  zendro_db_data:
  keycloak_pg_data:

networks:
  backend:
  reverseproxy:
    external: true
